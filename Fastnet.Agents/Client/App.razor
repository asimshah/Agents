@inject IAuthenticationService authenticationService
@inject NavigationManager navigationManager
<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(Program).Assembly" PreferExactMatches="@true">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <Authorizing>
                    <text> Please wait, we are authorizing the user. </text>
                </Authorizing>
                <NotAuthorized>
                    <div class="narrative">
                        <div>This site is not available to the general public.</div>
                        <div>If you are a registered user, please login.</div>
                    </div>
                </NotAuthorized>
            </AuthorizeRouteView>
        </Found>
        <NotFound>
            <LayoutView Layout="@typeof(MainLayout)">
                <p>Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>
<TokenManagement Mode="@TokenRefreshMode.BeforeExpiry" Interval="3" />
<MessageBox @ref="@messageBox" Warning="true" />
@code {
    private MessageBox messageBox;
    protected override void OnInitialized()
    {

        //siteService.SetOnUnAuthorised(async () =>
        //{
        //    //Console.WriteLine("App received unauthorised");
        //    await LogoutAsync();

        //});
        authenticationService.SetOnUnAuthorised(() =>
        {
            Logout();
        });
        base.OnInitialized();
    }
    private void Logout()
    {
        messageBox.Show(new string[] { "This session has expired.", "Please login again" }, async (dr) =>
        {
            await authenticationService.LogoutAsync();
            navigationManager.NavigateTo("/");
        });
    }
}
